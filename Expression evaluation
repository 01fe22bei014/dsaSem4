#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define MAX_SIZE 100

typedef struct {
    int top;
    char items[MAX_SIZE];
} Stack;

void push(Stack *s, char c) {
    if (s->top == MAX_SIZE - 1) {
        printf("Stack overflow\n");
        exit(1);
    }
    s->items[++(s->top)] = c;
}

char pop(Stack *s) {
    if (s->top == -1) {
        printf("Stack underflow\n");
        exit(1);
    }
    return s->items[(s->top)--];
}

char peek(Stack *s) {
    return s->items[s->top];
}

int isEmpty(Stack *s) {
    return s->top == -1;
}

int precedence(char op) {
    if (op == '+' || op == '-')
        return 1;
    else if (op == '*' || op == '/')
        return 2;
    else
        return 0; // Assuming parentheses have the lowest precedence
}

int evaluateExpression(char *exp) {
    Stack operandStack, operatorStack;
    operandStack.top = operatorStack.top = -1;

    for (int i = 0; exp[i] != '\0'; i++) {
        if (isdigit(exp[i])) {
            push(&operandStack, exp[i] - '0');
        } else if (exp[i] == '(') {
            push(&operatorStack, exp[i]);
        } else if (exp[i] == ')') {
            while (peek(&operatorStack) != '(') {
                char op = pop(&operatorStack);
                int operand2 = pop(&operandStack);
                int operand1 = pop(&operandStack);
                switch (op) {
                    case '+':
                        push(&operandStack, operand1 + operand2);
                        break;
                    case '-':
                        push(&operandStack, operand1 - operand2);
                        break;
                    case '*':
                        push(&operandStack, operand1 * operand2);
                        break;
                    case '/':
                        push(&operandStack, operand1 / operand2);
                        break;
                }
            }
            pop(&operatorStack); // Pop '('
        } else if (exp[i] == '+' || exp[i] == '-' || exp[i] == '*' || exp[i] == '/') {
            while (!isEmpty(&operatorStack) && precedence(peek(&operatorStack)) >= precedence(exp[i])) {
                char op = pop(&operatorStack);
                int operand2 = pop(&operandStack);
                int operand1 = pop(&operandStack);
                switch (op) {
                    case '+':
                        push(&operandStack, operand1 + operand2);
                        break;
                    case '-':
                        push(&operandStack, operand1 - operand2);
                        break;
                    case '*':
                        push(&operandStack, operand1 * operand2);
                        break;
                    case '/':
                        push(&operandStack, operand1 / operand2);
                        break;
                }
            }
            push(&operatorStack, exp[i]);
        }
    }

    while (!isEmpty(&operatorStack)) {
        char op = pop(&operatorStack);
        int operand2 = pop(&operandStack);
        int operand1 = pop(&operandStack);
        switch (op) {
            case '+':
                push(&operandStack, operand1 + operand2);
                break;
            case '-':
                push(&operandStack, operand1 - operand2);
                break;
            case '*':
                push(&operandStack, operand1 * operand2);
                break;
            case '/':
                push(&operandStack, operand1 / operand2);
                break;
        }
    }

    return operandStack.items[operandStack.top];
}

int main() {
    char exp[MAX_SIZE];
    printf("Enter expression: ");
    scanf("%s", exp);
    int result = evaluateExpression(exp);
    printf("Result: %d\n", result);
    return 0;
}
